services:
  nginx:  # A web server to handle HTTP/HTTPS requests.
    networks:
      - inception
    build:
      context: requirements/nginx
      dockerfile: "Dockerfile"
    image: nginx
    pull_policy: never    # Wonâ€™t pull from a remote registry.
    container_name: nginx
    depends_on:           # Waits for the wordpress service to start first.
      - wordpress
    ports:
      - "443:443"
    volumes:
      - web:/var/www/html
    restart: always
  
  wordpress:  # The PHP-based content management system.
    networks:
      - inception
    build:
      context: requirements/wordpress
      dockerfile: "Dockerfile"
    image: wordpress
    container_name: wordpress
    pull_policy: never
    depends_on:
      - mariadb
      - redis
    volumes:
      - web:/var/www/html
    environment:    # Configuration
      WORDPRESS_DB_HOST: mariadb
      WORDPRESS_SITE_URL: ${WORDPRESS_SITE_URL}

      WORDPRESS_SITE_TITLE: ${WORDPRESS_SITE_TITLE}
      WORDPRESS_ADM_USER: ${WORDPRESS_ADM_USER}
      WORDPRESS_ADM_PASS: ${WORDPRESS_ADM_PASS}
      WORDPRESS_ADM_EMAIL: ${WORDPRESS_ADM_EMAIL}

      WORDPRESS_USERNAME: ${WORDPRESS_USERNAME}
      WORDPRESS_PASS: ${WORDPRESS_PASS}
      WORDPRESS_EMAIL: ${WORDPRESS_EMAIL}

      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASS}
      MYSQL_DATABASE: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASS}
    restart: always

  mariadb:  # A MySQL-compatible database for WordPress data.
    networks:
      - inception
    volumes:
      - db:/var/lib/mysql
    build:
      context: requirements/mariadb
      dockerfile: "Dockerfile"
    image: mariadb
    pull_policy: never
    container_name: mariadb
    environment:
      MYSQL_DATABASE: ${MYSQL_DB}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASS}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASS}
    restart: always
  
  redis:  # A caching layer to improve WordPress performance.
    networks:
      - inception
    build:
      context: requirements/bonus/redis
      dockerfile: "Dockerfile"
    image: redis
    pull_policy: never
    container_name: redis
    restart: always   # Ensures the container restarts if it stops or crashes.

volumes:
  web:
    driver: local
    driver_opts:
      type: none
      device: ${HOME}/data/web
      o: bind
  db:
    driver: local
    driver_opts:
      type: none
      device: ${HOME}/data/db
      o: bind

networks:
  inception:
    driver: bridge